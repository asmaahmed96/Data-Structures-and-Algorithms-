Script started on Fri 11 Oct 2019 10:23:42 PM PDT
]0;ahmed021@empress:~/cs311/HWPrograms/forHW3[?1034h[ahmed021@empress forHW3]$ logoemacs llist.cpHW3P1client.cplsrm HW3P1client.cpp.clscd forHHWProgra[5Pcs3[1Plogoemacs llist.cpHW3P1client.cpp.c[[6Pllist.cp[8Plogocd cs31HWProgra[4PforHWlsrm HW3P1client.cpp.clsemacs HW3P1client.cp[6Pllist.cp[9Plogo[Klogoemacs llist.cpHW3P1client.cplsemacs HW3P1client.cp[1P HW3P1client.cp[1P HW3P1client.cp[1P HW3P1client.cp[1P HW3P1client.cp[1P HW3P1client.cg HW3P1client.c+ HW3P1client.c+ HW3P1client.c[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C llist.cpp
]0;ahmed021@empress:~/cs311/HWPrograms/forHW3[ahmed021@empress forHW3]$ ./a.out

MENU: These are your options: 

   (1) Case 1  
   (2) Case 2  
   (3) Case 3  
    Enter ( 0 ) to quit 
===>1
CASE 1: Basic --------------- 
... in llist constructor...
Step 1
It is empty
Step 2
[ empty ]
Step 3 adding 1 2 3 4
Step 4
[ 1 2 3 4 ]
Step 5 deleteFront twice
Removed: 1
Removed: 2
Step 6
[ 3 4 ]
Step 7
It is not empty
Step 8 deleteRear twice
Removed: 4
Removed: 3
Step 9
List is Empty
.... in llist destructor...

MENU: These are your options: 

   (1) Case 1  
   (2) Case 2  
   (3) Case 3  
    Enter ( 0 ) to quit 
===>2
Case 2: Insert and Delete ------------
... in llist constructor...
Step 1 addFront 9 8 6 5
Step 2
[ 5 6 8 9 ]
Step 3 insert first 4
Step 4 insert 4th 7
Step 5 insert 7th 10
[ 4 5 6 7 8 9 10 ]
Step 6 insert 9th
ERROR: Out of Range
Step7 insert 0th
ERROR: Out of Range
Step 8
[ 4 5 6 7 8 9 10 ]
Step 9 delete 1st
removed 4
Step 10 delete 6th
Removed: 10
Step 11 delete 3rd
Removed: 7
[ 5 6 8 9 ]
Step 12 delete 5th
ERROR:: Out of Range
Step 13 delete 0th
ERROR: Out of Range
Step 14
[ 5 6 8 9 ]
Step 15 delete all
Deleted: 9
Deleted: 8
Deleted: 6
Deleted: 5
Step 16
[ empty ]
Step 17 insert 0th
ERROR: Out of Range
Step 18 deleteFront
ERROr: Underflow
Step 19 delete 2nd
ERROR: Out of Range
Step 20 deleteRear
ERROR: Underlfow
.... in llist destructor...

MENU: These are your options: 

   (1) Case 1  
   (2) Case 2  
   (3) Case 3  
    Enter ( 0 ) to quit 
===>3
Case 3: Copy Constructor and = -------
... in llist constructor...
... in llist constructor...
Step1
L1: [ 1 2 3 4 5 ]
Step2
in copy test
[ 1 2 3 4 5 6 ]
finished
.... in llist destructor...
-- After copytest --- 
3
L1: [ 1 2 3 4 5 ]
-- Testing operator overloading ---
Step 4 Gets
Step 5
L1: [ 1 2 3 4 5 ]
Step 6
Step 7
L2: [ 7 8 9 10 ]
Step 8 Gets
Step 9
L2: [ 1 2 3 4 5 ]
Step 10
Step 11
L1 :[ 1 2 3 4 ]
Step 12
L1: [ 1 2 3 4 ]
Step 13
L2: [ 1 2 3 4 5 ]
.... in llist destructor...
.... in llist destructor...

MENU: These are your options: 

   (1) Case 1  
   (2) Case 2  
   (3) Case 3  
    Enter ( 0 ) to quit 
===>0
]0;ahmed021@empress:~/cs311/HWPrograms/forHW3[ahmed021@empress forHW3]$ exit
exit

Script done on Fri 11 Oct 2019 10:24:28 PM PDT
