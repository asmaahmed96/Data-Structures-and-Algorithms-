//CS311 Yoshii Linked List class

//INSTRUCTION:
//Must use the provided HW3P1_help.doc to create llist.cpp
//It helps to first create if-then-else structure to fill in later.
//- Make sure PURPOSE and PARAMETER comments are given in detail
//- Make sure all if-then-else are commented describing which case it is
//- Make sure all local variables are described fully with their purposes

//EMACS HINT:
//  You can copy from a Word document to emacs (contrl-right click)
//  cntr-K cuts and cntr-Y pastes
//  Esc x replace-str does string replacements
//  Esc > goes to the end of the file; Esc < to the beginning
//  Tab on each line will indent perfectly for C++

// ====================================================
//HW#: HW3P1 llist
//Your name: Asma Ahmed
//Complier:  g++
//File type: llist.cpp implementation file
//=====================================================

using namespace std;
#include<iostream>
#include"llist.h" 

llist::llist() //Constructor: initializes front and rear to NULL and count to 0
{
  Front = NULL;
  Rear = NULL;
  Count = 0;
  cout << "... in llist constructor..." << endl; 
}

llist::~llist() //Destructor: while list is not empty, calls deleteFront to get rid of all the nodes.
{
  el_t temp;
  while(!isEmpty())
    {
      deleteFront(temp);
    }
  cout << ".... in llist destructor..." << endl; 
}

//PURPOSE: To check if the list is empty by checking if both front and rear are NULL and the count is 0.
//PARAMETER: None
bool llist::isEmpty()
{
  if((Front == NULL)&&(Rear == NULL)&&(Count == 0)) //check all data members
    return true;
  else
    return false;
} 

//PURPOSE: Display all elements in each node.
//PARAMETER: None
void llist::displayAll()
{
  if(isEmpty())
    cout << "[ empty ]" << endl;
  else
    {
      Node *P;
      P = Front;
      cout << "[ ";
	while(P != NULL)
	  {
	    cout << P->Elem << " " ;
	    P = P->Next;
	  }
      cout << "]" << endl;
    }
}  
  
//PURPOSE: Add a new node with an element to the rear of the list
//PARAMETER: NewNum, passes element being added to rear of list
void llist::addRear(el_t NewNum) 
{
  if(isEmpty()) //if it is the very first node the create new node and make front and rear point to it. Put the NewNum in Elem field and undate counter.
    {
      Front = new Node;
      Front->Elem = NewNum;
      Rear = Front;
      Rear->Next = NULL;
      Count++;
    }
  else //add new node at rear and put NewNum in elem field of the new node. undate count
    {
      Rear->Next = new Node;
      Rear = Rear->Next;
      Rear->Next = NULL;
      Count++;
    }
} 

//PURPOSE: Add an element to the front of the list
//PARAMETER: NewNum, passes element being added to rear of list  
void llist::addFront(el_t NewNum) 
{
  if(isEmpty()) //if it is the very first node the create new node and make front and rear point to it. Put the NewNum in Elem field and undate counter. 
    {
      Front = new Node;
      Front->Elem = NewNum;
      Rear = Front;
      Rear->Next = NULL;
      Count++;
    }
  else //add new node at Front and put NewNum in elem field of the new node. undate count   
    { 
      Node *Q = new Node;
      Q->Elem = NewNum;
      Q->Next = Front;
      Front = Q;
      Count++;
    }
} 

//PURPOSE: Delete front node and element
//PARAMETER: OldNum (Passed by refernce) variable that recieves deleted front node element
void llist::deleteFront(el_t& OldNum) 
{
  if(isEmpty()) // error case: If list is empty, throws an exception
    throw Underflow();
  else if(Count==1) // special case: if this is going to make the list empty, give back the front node element through OldNum (by ref) and also remove the front node. Count is updated. Set Front and Rear to NULL
    {
      OldNum = Front->Elem;
      delete Front;
      Front=NULL;
      Rear=NULL;
      Count--;
    }
  else // regular case: give back the front node element through OldNum (by ref) and also remove the front node. Count is updated.
    {
      OldNum = Front->Elem;
      Node *Second; // know the Second node
      Second = Front->Next;
      delete Front;
      Front = Second; // Front moves down
      Count--;
    }      
} 

//PURPOSE: Delete the rear element and pass the element back
//PARAMETER: OldNum (passes by reference) variable that recieves deleted rear node element. 
void llist::deleteRear(el_t& OldNum)
{
  if(isEmpty()) // error case: If list is empty, throws an exception
    throw Underflow();
  else if(Count==1) // special case: if this is going to make the list empty, give back the rear node element through OldNum (by ref) and also remove the rear node. Count is updated. Set Front and Rear to NULL 
    {
      OldNum = Rear->Elem;
      delete Rear;
      Front=NULL;
      Rear=NULL;
      Count--;
    }
  else // regular case: give back the rear node element through OldNum (by ref) and also remove the rear node. Count is updated. 
    {
      OldNum = Rear->Elem;
      Node *P; // know the previous(P) node
      P=Front;
      while(P->Next!=Rear)
	P=P->Next;
      delete Rear;
      Rear=P; // Rear moves up
      Rear->Next=NULL;
      Count--;
    }
} 

// Utility Function to move a local pointer to the Ith node
// PURPOSE: Utility Function to move a local pointer to the Ith node
// PARAMETER: I variable to receive the desired node position; temp is (pass by ref) pointer that points to Ith node
void llist::moveTo(int I, Node*& temp)
{ 
  temp = Front;
  for ( int j = 1; j < I-1; j++ ) // moves temp I-1 times 
    temp = temp->Next;
}

//PURPOSE: Delete the desired element and node
//PARAMETER: I receives the desired node position;OldNum (pass by reference) - variable to receive the deleted node element 
void llist::deleteIth(int I, el_t& OldNum) 
{
  if(I>Count || I<1) // error case: if it is an illegal value, throw an exception
    throw OutOfRange(); 
  else if(I==1) // special case: if the position is the first node(front)
    deleteFront(OldNum);
  else if(I==Count) // special case: if the position is the last node(rear)
    deleteRear(OldNum);
  else // regular case: will delete the Ith node 
    {
      Node* P;
      moveTo(I,P); // move P to Ith node
      Node* Q;
      Q=P->Next;
      OldNum=Q->Elem;
      P->Next=Q->Next;
      delete Q;
      Count--;
    }
} 

//PURPOSE: Add an element before the desired element
//PARAMETER: I receives the desired node position; newNum - passes the element to be added to Ith Node
void llist::insertIth(int I, el_t newNum) 
{
  if(I>Count+1 || I<1) // error case: if it is an illegal value, throw an exception
    throw OutOfRange();
  else if(I==1) // special case: if the position is the first node(front)
    addFront(newNum);
  else if(I==Count+1) // special case: special case: if the position is the last node(rear)
    addRear(newNum);
  else // regular case: inserts right before the Ith node
    {    
      Node* P;
      moveTo(I,P);//move to ith node
      Node* Q =new Node;
      Q->Elem=newNum;
      Q->Next=P->Next;
      P->Next=Q->Next;
      P->Next=Q;     
      Count++;
    } 
} 

//PURPOSE: Overloading of = for allowing the client to use = for linked list objects 
//PARAMETER: Passes Original to constructor by reference 
llist::llist(const llist& Original)
{ 
  //this->'s data members need to be initialized here first
  Front = NULL; Rear = NULL; Count = 0;
  //  this-> object has to be built up by allocating new cells
  //  and copying the values from Original into each cell as we did with 
  //  operator= above. To do this,
  //     copy here the (**) lines in Operator Overloading of = but note that it is Original and not OtherOne.
  Node* P;  // local pointer for OtherOne                                                                                             
  P = Original.Front;
  while (P != NULL)  // a loop which repeats until you reach the end of Original.                                                  
    {
      this->addRear(P->Elem);    //P’s element is added to this->                                               
      P = P->Next;              // Go to the next node in Original.                                                     
    }         
    //  Nothing to return because this is a constructor. 
} 

//PURPOSE: Overloading of = for allowing the client to use = for linked list objects
//PARAMETER: passes object OtherOne (by ref) to be copied
llist& llist::operator=(const llist& OtherOne) 
{
  el_t x;
  // First make sure this-> and OtherOne are not the same object.
  // To do this, compare the pointers to the objects .
  if (&OtherOne != this)  // if not the same
    {
      // this-> object has to be emptied first.
      while (! this->isEmpty() )
	this->deleteRear(x);  
      // this-> object has to be built up by allocating new cells with OtherOne elements (**)
      Node* P;  // local pointer for OtherOne
      P = OtherOne.Front;
      while (P != NULL)  // a loop which repeats until you reach the end of OtherOne. 
        {
	  this->addRear(P->Elem);    //P’s element is added to this->
	  P = P->Next;                         // Go to the next node in OtherOne   
	} 
    }// end of if              
  return *this;    // return the result unconditionally.  Note that the result is returned by reference.
 
} 

