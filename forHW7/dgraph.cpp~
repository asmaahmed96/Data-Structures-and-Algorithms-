//CS311 Yoshii dgraph.cpp 
// INSTRUCTION:
//  Complete all the functions you listed in dgraph.h
//  Comment the file completely using How to Comment file.
//  Use HW6-help.docx to finish the functions.
//-------------------------------------------------------

//======================================================
// HW#: HW6 dgraph
// Name: Asma Ahmed
// File Type: .cpp implementaion file
//========================================================

using namespace std;
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include "dgraph.h"

dgraph::dgraph() // initialize vertexName (blank) and visit numbers (0)    // initialize countUsed to be 0
{
  countUsed = 0;
  for(int i = 0; i < SIZE; i++)
    {
      Gtable[i].vertexName = ' ';
      Gtable[i].visit = 0;
    }
}

dgraph::~dgraph()   // do we have to delete all nodes of slists in table??
// Question: If we do not do this, will the llist destructor be called automatically??? Try it.
{
  //llist will be called
}

void dgraph::fillTable()  // be sure to read from a specified file
{
  char x;
  string fname;
  cout << "Enter a file name: ";
  cin >> fname;
  ifstream fin (fname.c_str(), ios::in); // declare and open fname
  while (fin >> Gtable[countUsed].vertexName)  // IF I CAN READ THE NAME
    { 
      fin >> Gtable[countUsed].outDegree;
      for(int i = 1; i <= Gtable[countUsed].outDegree; i++)
	{
	  fin >> x;
	  (Gtable[countUsed].adjacentOnes).addRear(x);   // this is a slist function from HW3
	}	  
      countUsed++;
    }
  fin.close();
  // the rest is in HW6-help
}
void dgraph::displayGraph() // be sure to display
{// in a really nice table format -- all columns but no unused rows 
  for(int i = 0; i < countUsed; i++)
    {
      cout << " " << Gtable[i].vertexName << " " << Gtable[i].outDegree << " " << Gtable[i].visit << " ";
      (Gtable[i].adjacentOnes).displayAll();
    }
}

int dgraph::findOutDegree(char V)// throws exception
{// does not use a loop
  int i = int (V) - 65;
  if(i >= 0 && i < countUsed)
    return Gtable[i].outDegree;
  else 
    throw BadVertex();
}

slist dgraph::findAdjacency(char V)// throws exception
{// does not use a loop
  int i = int (V) - 65;
  if(i >= 0 && i < countUsed)
    return Gtable[i].adjacentOnes;
  else 
    throw BadVertex();
}

void dgraph::visit(int visitNum, char vertex)
{
  if(!isMarked(vertex))
    {
      Gtable[vertex-65].visit = visitNum;
    }
}

bool dgraph::isMarked(char vertex)
{
  if(Gtable[vertex-65].visit != 0)
    {
      return true;
    }
}
